name: Update Proxy Configurations

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - 'requirements.txt'

jobs:
  update-configs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Run configuration update
      run: |
        python scripts/auto_updater.py --once
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Validate configurations
      run: |
        python tests/config_validator.py configs/singbox.json --type singbox
        python tests/config_validator.py configs/universal.txt --type subscription
    
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add configs/
        git commit -m "üîÑ Auto-update proxy configurations $(date -u '+%Y-%m-%d %H:%M:%S UTC')" || exit 0
        git push
    
    - name: Create status file
      run: |
        echo "{
          \"last_updated\": \"$(date -u -Iseconds)\",
          \"status\": \"success\",
          \"commit\": \"${{ github.sha }}\",
          \"workflow_run\": \"${{ github.run_id }}\"
        }" > configs/status.json
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: proxy-configurations
        path: |
          configs/
          logs/
        retention-days: 7

  test-configurations:
    needs: update-configs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=scripts --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    needs: update-configs
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r scripts/ -f json -o bandit-report.json || true
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  notify:
    needs: [update-configs, test-configurations, security-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.update-configs.result == 'success'
      run: |
        echo "‚úÖ Proxy configurations updated successfully"
    
    - name: Notify on failure
      if: needs.update-configs.result == 'failure'
      run: |
        echo "‚ùå Proxy configuration update failed"
        exit 1

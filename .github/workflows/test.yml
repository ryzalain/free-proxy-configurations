name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist
    
    - name: Create test directories
      run: |
        mkdir -p logs configs templates
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=scripts --cov-report=xml --cov-report=html -n auto
    
    - name: Test configuration generation
      run: |
        python scripts/proxy_generator.py
    
    - name: Test configuration validation
      run: |
        python tests/config_validator.py configs/singbox.json --type singbox
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-${{ matrix.python-version }}

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run Black
      run: |
        black --check scripts/ tests/
    
    - name: Run isort
      run: |
        isort --check-only scripts/ tests/
    
    - name: Run flake8
      run: |
        flake8 scripts/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run mypy
      run: |
        mypy scripts/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety semgrep
    
    - name: Run Bandit
      run: |
        bandit -r scripts/ -ll
    
    - name: Run Safety
      run: |
        safety check
    
    - name: Run Semgrep
      run: |
        semgrep --config=auto scripts/ tests/

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Check documentation links
      run: |
        # Check for broken internal links
        find . -name "*.md" -exec grep -l "](\./" {} \; | while read file; do
          echo "Checking links in $file"
          grep -o "](\.\/[^)]*)" "$file" | sed 's/](\.\///' | sed 's/)//' | while read link; do
            if [ ! -f "$link" ] && [ ! -d "$link" ]; then
              echo "Broken link in $file: $link"
              exit 1
            fi
          done
        done
    
    - name: Validate JSON files
      run: |
        find . -name "*.json" -exec python -m json.tool {} \; > /dev/null
    
    - name: Check README completeness
      run: |
        # Check if README has all required sections
        required_sections=("Quick Start" "Supported Protocols" "Supported Clients" "Documentation" "Security Features")
        for section in "${required_sections[@]}"; do
          if ! grep -q "$section" README.md; then
            echo "Missing section in README.md: $section"
            exit 1
          fi
        done

  integration:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run setup script
      run: |
        python scripts/setup.py --skip-service --skip-cron --skip-tests
    
    - name: Test configuration generation and validation
      run: |
        python scripts/proxy_generator.py
        python tests/config_validator.py configs/singbox.json --type singbox
        python tests/config_validator.py configs/universal.txt --type subscription
    
    - name: Test auto-updater (dry run)
      run: |
        # Test updater without actually updating
        timeout 30s python scripts/auto_updater.py --once || true
    
    - name: Verify all files are created
      run: |
        required_files=(
          "configs/singbox.json"
          "configs/universal.txt"
          "configs/shadowsocks.txt"
          "configs/v2ray.txt"
          "templates/vmess_template.json"
          "templates/shadowsocks_template.json"
          "templates/trojan_template.json"
          ".env.example"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Missing required file: $file"
            exit 1
          fi
        done
        
        echo "âœ… All required files are present"